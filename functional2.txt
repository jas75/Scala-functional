			I. Pure functions and sude effects & referential transparancy

A function takes the input, computes the output and returns it.
That's all, if it does anything else that impacts the code outside of it, 
it is called a side effect of the function.


			

1. The output is only dependent on input parameters values
2. The function doesn't modify the input parameter values
3. the function doesn't have a side effect

More 

A function is referntially transparent if evaluating it gives the same value for same arguments.
You can tedst the purity of a function using referntial transparency

Why pure functions ?

1.Safe way to program
2.Composable or modular

Exemple : val x = doThis(a).thenThis(b)
							.andThenThis(c)
							.doThistoo(d)
							.andFinnalyThis(e)

It is very common in FP to combine many functions into a simple solution
you cando this with every functions but better with pure functions because they don't have side effects.

3.Easy to test

Myfunction1->prints "Hello world" not pure function
Myfunction2 -> Returns "Hello world" pure function

4.Memoizable
we can cache the output

5. Can be lazy // see that later



			II First class functions & higer order functions & anonymous functions

first class function ?
If you can treeat a function as a value, it is a first class function

1. you can assign a value to a variable, and assign a function to a variable

2. You can pass it as an argument to other functions

3. You can return it as a value from other functions

In scala, all functions are first class functions

higher order function ?

a function that doest at least one of the following is a higher order function

1.takes one or more functions as arguments
2 . Return a function as its result

Ex: def f1=println("I do nothing") // by default, this a first class function

def f2(f: Unit) = f // if f2 can take f1 as an argument, f2 is a higer order function

Example of a function returning a function :
//later

anonymous function ?

A standard function :
def doubler(i: Int): Int = {return i * 2}

if you don't give a name to a function, it's anonymous, also called literal function

(i: Int) => {i*2}:Int // a,onymous function uses =>

Example with assigning to a val 
val d = (i: Int) => { i*2} : Int


Then what is the purpose of anonymous function ?

def getOps(c:Int) = (i: Int) => { 
 // your code
}

def getOps(c: Int) = (i :Int)=> { 
	val doubler = (x:Int)=> { x * 2}
	val tripler = (x:Int)=> { x * 3 }
	if(c>0) doubler(i)
	else tripler(i)
}

//let say i have this variable that is a list
//getOps is a high order function, which returns the tripler function and applies it to every items in List

val r = 1 to 5
r.map(getOps(-4))

It's gonna return a Range type of all value in the list times 3. 

Instead of the above functions, we can make : 

def getops(c:Int)=(i:Int) => {
	if(c>0){i*2}
	else {i*3}
}

		WHAT IS THE PURPOSE OF ALL OF THIS

customers: Array[String] = Array("ben","romain","jas","damien")

for(i <- 0 to customers.length -1){
	println("Hi" + customers(i))
}

will output Hi ben Hi romain etc

def remindPayment(x:String) = println("Payment reminder for " + x)

for(i <- 0 to customers.length -1){
	remindPayment(customers(i))
}

will output Payment reminder for ben etc..

The sumpliest way to do this would be :

def forEach(a : Array[String], f: String => Unit ) = {
	var i = 0

	for(i <- 0 to a.length -1){
		f(a(i))
	}
}

forEach(customers,remindPayment)

Will output the same. 
This forach function can be reused for anything

		III Immutablity and recursions

Unable to change
We create values or objects by initalizing them
var is a variable, you can change it
val is a constant, you can't change it's immutable

When using scala as a functional programming language, you use val

Programs with only constants.

So how can we program without variables, and what are the benefits ?
 Firt, immutablity helps to take a mathematical approach and create pure functions.

 Second, more thread safe .

 Recursion

 A recursion is a programming tecnique in which a function calls itself.
 Most of the loops can be replaced by recursion.
 We can convert loops into recursion and avoid mutation ( var that can change)


How to approach recursion ?

1. Indentify the list
2. Implement the termination condition
3. Compute te head and recurs wit the tail

Ex: 

def rFactorial(n : Int): Int = {
	if(n <= 0){
		return 1
	}
	else{
		return n * rFactorial(n-1) // here the mutliplication is the final action. it's a recursive function
	}
}

def tFactorial(n : Int, f: Int) : Int = { // f must be 1
	if(n <= 0){
		return 1
	}
	else{
		return tFactorial(n-1,n*f) // the recursive cal is the last action this is a tail recursive function
	}
}


 recursive function with only one parameter:

def Factorial(i : Int): Int = {
	println("You called Factorial for "+i) // side effect

	def tFactorial(n: Int, f:Int):Int = {
		if(n <= 0){
			f
		}
		else{
			tFactorial(n-1, n*f)
		}
	}

	return tFactorial(i,1)
}

The list is (5,4,3,2,1,0)

in a list the first element is called th head, the rest is called the tail

You can check the stack by throwing an exception

def eFactorial(n: Int): Int = {
	if(n <= 0){
		throw new Exception("boom !")
	}
	else{
		return n * eFactorial(n-1) 
	}
}

For memory and performance, recursions are better than loops.

a tail recursion is a function call performed at the last action

		IV Statements

A program is nothing but a sequence of statements
A sequence of statements that modifiy some program state

example : 

def myResult(m:Int) = {
	var r= "" // definition
	if(m >=50){ // if statement modify the r value
		r="passed"
	}
	else{
		r="failed"b
		println(r) // change the state of the console .
	}
}

This program is against function programming. In FP we don't modify states.

A functional statement returns a value

println function returns a Unit. like void.
Unit has however a value

Why do every statement return a value.

It helps to achieve mutability.

Imperative function

def myResult(m:Int) = {
	var r =""

	if(m>=50)
		r="passed"
	else
		r="failed"

	println(r)
}

Same function but in functional

def myResult(m:Int) = {
	if(m >=50) "passed"
	else "failed"
}

		V Strict and lazy evalutation

Strict evaluate the expression now
lazy evaluate on the first use

Strict :

val s = Factorial(15)/Factorial(40)

In case Of higer order function
The function is evaluated in every use.
 the solution might be to cache the function in a val like this to avoid multiple evaluation

 def test(f: =>Int){
 	val t = f
 }

lazy : 
 
 lazy val l = Factorial(15)/Factorial(11)
 When declaring a val with lazy keyword, scala will not evaluate the expression until we use it

 result at first println(l)

 You called factorial for 15
You called factorial for 11
50

and for Second
50 

the reason is that scala evaluates the lazy functions only once and when it is used



So what is lazy evalutation?
Evaluate on first use

lazy on a higer order function

def twice(f: =>Int) = {
	val i = f

	println("We didn't use i yet")

	i + i
}

twice(Factorial(15)/Factorial(11))

Output :

You called factorial for 15
you called factorial for 11
We didn't use i yet 
res0: Int = 100


def twice(f: =>Int) = {
	lazy val i = f

	println("We didn't use i yet")

	i + i // sice i is lazy, it will be exectued by scala here, when we use it
}


twice(Factorial(15)/Factorial(11))

Output :

We didn't use i yet 
You called factorial for 15
you called factorial for 11
res0: Int = 100

Summarize

Defaut metohd in Scala is strict evaluation
You can cache a pure function value in casee of a higher order function


Lazy alternative to lists

Stream. insted of toList, use toStream.
toStream evaluates the first line of the file, the rest is ?.
Since toStreamis a lazy structure, the rest is not evaluated

val searchInAFile = Source.fromFile(nameOfFile).getLines().toStream.filter(_.contains("une chaine")).take(2) 
this line of code knows that it must take 2 lines containing "une chaine" but there are not evaluated
since it's a lazy structure. It will be when we use it.

To print both the lines :  s foreach println

look at Fibonnaci series. 
Scala allows us to make "infinite loop" with lazy evaluation. Because the data is not evaluated yet,
we can make infinite lists just waiting for their first use


			VI PAttern matching


Type checking for example

Complete example:

Assume you have a class to define a message

class Message(p_id: String, p_msg: String){
	val id = p_id;
	val msg = p_msg;
}

Now assume you have a List of Messages

val messageList= List(
	Message("tom@gmail.com","Message text1"),
	Message("jason@gmail.com","Message salut"),
	Message("dalien@gmail.com","hey"),
	Message("0646283638","yes bitch"),
	Message("salut@gmail.com","ok"),
)

Some of them are email while other are phone number
we ignore domain names

Do we have two successive emails from the same persone on this list ?
create a function for this
Step by step logic : 

1. Take two messages from the list // Deconstruction
2. Exrtact the sender's id from both of the messages // Deconstruction
3. Check if both of them are email adresses // Type test
4. If yes, ignore the domain part and extract only the username // Deconstruction
5. Check if both usernames are same // if condition
6. If yes return a positive answer // Action
7. If no, remove the head of the list and repeat wit the tail of the list // deconstruction
8. If you reach the end of this list, return a negative answer


1/ Take 2 messages from the list and deconstruct the list into three parts :
the first message:
Message("tom@gmail", "Message text1")
the second message:
Message("jason@gmail.com","Message salut")
the remaining message:
Message("dalien@gmail.com","hey"),
Message("0646283638","yes bitch"),
Message("salut@gmail.com","ok")

2/ Again deconstruction of a message into id and the message text

3/ This is a type test, if we have a class for the email adress, then we want to check if the given string 
is of an email adress type

4/ Decobstruction again. extract the username from email adresss

5/ If condition

6/ It s just an action

7/ Again deconstruction, this is again deconstructing your list into a head and the tail


			VII Closure

A closure is a function: Like any other scala functions, a closure may be pure or impure, named or anonymous.
 A closure is a function that uses one or more free variables.


 See later





 






